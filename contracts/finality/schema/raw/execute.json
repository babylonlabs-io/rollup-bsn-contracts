{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "This message allows a finality provider to commit to a sequence of public randomness values that will be revealed later during finality signature submissions.\n\nThe commitment is a Merkle root containing the public randomness values. When submitting finality signatures later, the provider must include Merkle proofs that verify against this commitment.\n\nThis commitment mechanism ensures that finality providers cannot adaptively choose their public randomness values after seeing block contents, which is important for security.",
      "type": "object",
      "required": [
        "commit_public_randomness"
      ],
      "properties": {
        "commit_public_randomness": {
          "type": "object",
          "required": [
            "commitment",
            "fp_pubkey_hex",
            "num_pub_rand",
            "signature",
            "start_height"
          ],
          "properties": {
            "commitment": {
              "description": "`commitment` is the commitment of these public randomness values. Currently, it's the root of the Merkle tree that includes the public randomness",
              "allOf": [
                {
                  "$ref": "#/definitions/Binary"
                }
              ]
            },
            "fp_pubkey_hex": {
              "description": "`fp_pubkey_hex` is the BTC PK of the finality provider that commits the public randomness",
              "type": "string"
            },
            "num_pub_rand": {
              "description": "`num_pub_rand` is the amount of public randomness committed",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "signature": {
              "description": "`signature` is the signature on (start_height || num_pub_rand || commitment) signed by the SK corresponding to `fp_pubkey_hex`. This prevents others committing public randomness on behalf of `fp_pubkey_hex`",
              "allOf": [
                {
                  "$ref": "#/definitions/Binary"
                }
              ]
            },
            "start_height": {
              "description": "`start_height` is the start block height of the list of public randomness",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Submit Finality Signature.\n\nThis is a message that can be called by a finality provider to submit their finality signature to the BSN. The signature is verified by the BSN using the finality provider's public key. If the finality provider has already signed a different block at the same height, they will be slashed by sending an equivocation evidence to Babylon Genesis.\n\nThis message is equivalent to the `MsgAddFinalitySig` message in the Babylon finality protobuf defs.",
      "type": "object",
      "required": [
        "submit_finality_signature"
      ],
      "properties": {
        "submit_finality_signature": {
          "type": "object",
          "required": [
            "block_hash",
            "fp_pubkey_hex",
            "height",
            "proof",
            "pub_rand",
            "signature"
          ],
          "properties": {
            "block_hash": {
              "description": "Hash of the block being finalized",
              "allOf": [
                {
                  "$ref": "#/definitions/Binary"
                }
              ]
            },
            "fp_pubkey_hex": {
              "description": "The BTC public key of the finality provider submitting the signature",
              "type": "string"
            },
            "height": {
              "description": "The block height this finality signature is for",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "l1_block_hash_hex": {
              "description": "Optional L1 block hash hex (rollup-specific)",
              "type": [
                "string",
                "null"
              ]
            },
            "l1_block_number": {
              "description": "Optional L1 block number (rollup-specific)",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "proof": {
              "description": "Merkle proof verifying that pub_rand was included in the earlier commitment",
              "allOf": [
                {
                  "$ref": "#/definitions/Proof"
                }
              ]
            },
            "pub_rand": {
              "description": "The public randomness used for signing this block",
              "allOf": [
                {
                  "$ref": "#/definitions/Binary"
                }
              ]
            },
            "signature": {
              "description": "Finality signature on (height || block_hash) signed by finality provider",
              "allOf": [
                {
                  "$ref": "#/definitions/Binary"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update the admin address.\n\nThis message can be called by the admin only. The new admin address must be a valid Cosmos address.",
      "type": "object",
      "required": [
        "update_admin"
      ],
      "properties": {
        "update_admin": {
          "type": "object",
          "required": [
            "admin"
          ],
          "properties": {
            "admin": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Prune old data (finality signatures, signatories by block hash, and public randomness values).\n\nThis message can be called by the admin only. It removes old data for rollup blocks with height <= rollup_height.\n\nWARNING: This operation is irreversible. The admin is responsible for ensuring that the pruning height is safe and that no data is still being used for the affected height range.",
      "type": "object",
      "required": [
        "prune_data"
      ],
      "properties": {
        "prune_data": {
          "type": "object",
          "required": [
            "rollup_height"
          ],
          "properties": {
            "max_pub_rand_values_to_prune": {
              "description": "Maximum number of public randomness values to prune in a single operation. This prevents gas exhaustion when there are many old values. If not provided, the default value is 50.",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "max_signatures_to_prune": {
              "description": "Maximum number of finality signatures and signatories to prune in a single operation. Since every signature has a corresponding signatory record, this limit applies to both. This prevents gas exhaustion when there are many old entries. If not provided, the default value is 50.",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "rollup_height": {
              "description": "Remove all data for rollup blocks with height <= this value. The admin should ensure this height provides sufficient safety margin for chain reorganizations and data submission delays.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Add a finality provider to the allowlist.\n\nThis message can be called by the admin only. Only finality providers in the allowlist can submit finality signatures and public randomness commitments.",
      "type": "object",
      "required": [
        "add_to_allowlist"
      ],
      "properties": {
        "add_to_allowlist": {
          "type": "object",
          "required": [
            "fp_pubkey_hex_list"
          ],
          "properties": {
            "fp_pubkey_hex_list": {
              "description": "The BTC public keys of the finality providers to add to the allowlist (in hex format)",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Remove a finality provider from the allowlist.\n\nThis message can be called by the admin only. Removing a finality provider from the allowlist will prevent them from submitting new finality signatures and public randomness commitments.",
      "type": "object",
      "required": [
        "remove_from_allowlist"
      ],
      "properties": {
        "remove_from_allowlist": {
          "type": "object",
          "required": [
            "fp_pubkey_hex_list"
          ],
          "properties": {
            "fp_pubkey_hex_list": {
              "description": "The BTC public keys of the finality providers to remove from the allowlist (in hex format)",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Proof": {
      "description": "A `Proof` is a proof of a leaf's existence in a Merkle tree.\n\nThe convention for proofs is to include leaf hashes, but to exclude the root hash. This convention is implemented across IAVL range proofs as well. Keep this consistent unless there's a very good reason to change everything. This affects the generalized proof system as well.\n\nEquivalent to / adapted from cometbft/crypto/merkle/proof.go.",
      "type": "object",
      "required": [
        "aunts",
        "index",
        "leaf_hash",
        "total"
      ],
      "properties": {
        "aunts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Binary"
          }
        },
        "index": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "leaf_hash": {
          "$ref": "#/definitions/Binary"
        },
        "total": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    }
  }
}
