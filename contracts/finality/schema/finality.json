{
  "contract_name": "finality",
  "contract_version": "0.14.1",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "admin",
      "bsn_id",
      "is_enabled"
    ],
    "properties": {
      "admin": {
        "type": "string"
      },
      "bsn_id": {
        "type": "string"
      },
      "is_enabled": {
        "type": "boolean"
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "This message allows a finality provider to commit to a sequence of public randomness values that will be revealed later during finality signature submissions.\n\nThe commitment is a Merkle root containing the public randomness values. When submitting finality signatures later, the provider must include Merkle proofs that verify against this commitment.\n\nThis commitment mechanism ensures that finality providers cannot adaptively choose their public randomness values after seeing block contents, which is important for security.",
        "type": "object",
        "required": [
          "commit_public_randomness"
        ],
        "properties": {
          "commit_public_randomness": {
            "type": "object",
            "required": [
              "commitment",
              "fp_pubkey_hex",
              "num_pub_rand",
              "signature",
              "start_height"
            ],
            "properties": {
              "commitment": {
                "description": "`commitment` is the commitment of these public randomness values. Currently, it's the root of the Merkle tree that includes the public randomness",
                "allOf": [
                  {
                    "$ref": "#/definitions/Binary"
                  }
                ]
              },
              "fp_pubkey_hex": {
                "description": "`fp_pubkey_hex` is the BTC PK of the finality provider that commits the public randomness",
                "type": "string"
              },
              "num_pub_rand": {
                "description": "`num_pub_rand` is the amount of public randomness committed",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "signature": {
                "description": "`signature` is the signature on (start_height || num_pub_rand || commitment) signed by the SK corresponding to `fp_pubkey_hex`. This prevents others committing public randomness on behalf of `fp_pubkey_hex`",
                "allOf": [
                  {
                    "$ref": "#/definitions/Binary"
                  }
                ]
              },
              "start_height": {
                "description": "`start_height` is the start block height of the list of public randomness",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Submit Finality Signature.\n\nThis is a message that can be called by a finality provider to submit their finality signature to the BSN. The signature is verified by the BSN using the finality provider's public key. If the finality provider has already signed a different block at the same height, they will be slashed by sending an equivocation evidence to Babylon Genesis.\n\nThis message is equivalent to the `MsgAddFinalitySig` message in the Babylon finality protobuf defs.",
        "type": "object",
        "required": [
          "submit_finality_signature"
        ],
        "properties": {
          "submit_finality_signature": {
            "type": "object",
            "required": [
              "block_hash",
              "fp_pubkey_hex",
              "height",
              "proof",
              "pub_rand",
              "signature"
            ],
            "properties": {
              "block_hash": {
                "description": "Hash of the block being finalized",
                "allOf": [
                  {
                    "$ref": "#/definitions/Binary"
                  }
                ]
              },
              "fp_pubkey_hex": {
                "description": "The BTC public key of the finality provider submitting the signature",
                "type": "string"
              },
              "height": {
                "description": "The block height this finality signature is for",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "l1_block_hash_hex": {
                "description": "Optional L1 block hash hex (rollup-specific)",
                "type": [
                  "string",
                  "null"
                ]
              },
              "l1_block_number": {
                "description": "Optional L1 block number (rollup-specific)",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "proof": {
                "description": "Merkle proof verifying that pub_rand was included in the earlier commitment",
                "allOf": [
                  {
                    "$ref": "#/definitions/Proof"
                  }
                ]
              },
              "pub_rand": {
                "description": "The public randomness used for signing this block",
                "allOf": [
                  {
                    "$ref": "#/definitions/Binary"
                  }
                ]
              },
              "signature": {
                "description": "Finality signature on (height || block_hash) signed by finality provider",
                "allOf": [
                  {
                    "$ref": "#/definitions/Binary"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Set enabled status of the finality contract.\n\nThis message can be called by the admin only. If disabled, the finality contract and the BTC staking finality will not be used by the rollup. Note this should be implemented in the rollup's finality gadget daemon program and is not enforced by the contract itself.",
        "type": "object",
        "required": [
          "set_enabled"
        ],
        "properties": {
          "set_enabled": {
            "type": "object",
            "required": [
              "enabled"
            ],
            "properties": {
              "enabled": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update the admin address.\n\nThis message can be called by the admin only. The new admin address must be a valid Cosmos address.",
        "type": "object",
        "required": [
          "update_admin"
        ],
        "properties": {
          "update_admin": {
            "type": "object",
            "required": [
              "admin"
            ],
            "properties": {
              "admin": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Proof": {
        "description": "A `Proof` is a proof of a leaf's existence in a Merkle tree.\n\nThe convention for proofs is to include leaf hashes, but to exclude the root hash. This convention is implemented across IAVL range proofs as well. Keep this consistent unless there's a very good reason to change everything. This affects the generalized proof system as well.\n\nEquivalent to / adapted from cometbft/crypto/merkle/proof.go.",
        "type": "object",
        "required": [
          "aunts",
          "index",
          "leaf_hash",
          "total"
        ],
        "properties": {
          "aunts": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Binary"
            }
          },
          "index": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "leaf_hash": {
            "$ref": "#/definitions/Binary"
          },
          "total": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "block_voters"
        ],
        "properties": {
          "block_voters": {
            "type": "object",
            "required": [
              "hash_hex",
              "height"
            ],
            "properties": {
              "hash_hex": {
                "type": "string"
              },
              "height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "`FirstPubRandCommit` returns the first public random commitment (if any) for a given FP.\n\n`btc_pk_hex` is the BTC public key of the finality provider, in hex format.",
        "type": "object",
        "required": [
          "first_pub_rand_commit"
        ],
        "properties": {
          "first_pub_rand_commit": {
            "type": "object",
            "required": [
              "btc_pk_hex"
            ],
            "properties": {
              "btc_pk_hex": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "`LastPubRandCommit` returns the last public random commitment (if any) for a given FP.\n\n`btc_pk_hex` is the BTC public key of the finality provider, in hex format.",
        "type": "object",
        "required": [
          "last_pub_rand_commit"
        ],
        "properties": {
          "last_pub_rand_commit": {
            "type": "object",
            "required": [
              "btc_pk_hex"
            ],
            "properties": {
              "btc_pk_hex": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "admin"
        ],
        "properties": {
          "admin": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "is_enabled"
        ],
        "properties": {
          "is_enabled": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressible in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
    "type": "object",
    "additionalProperties": false
  },
  "sudo": null,
  "responses": {
    "admin": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AdminResponse",
      "description": "Returned from Admin.query_admin()",
      "type": "object",
      "properties": {
        "admin": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "block_voters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_BlockVoterInfo",
      "type": "array",
      "items": {
        "$ref": "#/definitions/BlockVoterInfo"
      },
      "definitions": {
        "BlockVoterInfo": {
          "type": "object",
          "required": [
            "finality_signature",
            "fp_btc_pk_hex",
            "pub_rand"
          ],
          "properties": {
            "finality_signature": {
              "$ref": "#/definitions/FinalitySigInfo"
            },
            "fp_btc_pk_hex": {
              "type": "string"
            },
            "pub_rand": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          },
          "additionalProperties": false
        },
        "FinalitySigInfo": {
          "description": "FinalitySigInfo is a struct that contains the finality signature and block hash for a given block height and fp",
          "type": "object",
          "required": [
            "block_hash",
            "finality_sig"
          ],
          "properties": {
            "block_hash": {
              "description": "the block hash that the finality signature is for",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "finality_sig": {
              "description": "the finality signature",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          },
          "additionalProperties": false
        }
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "description": "Config are OP finality gadget's configuration",
      "type": "object",
      "required": [
        "bsn_id"
      ],
      "properties": {
        "bsn_id": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "first_pub_rand_commit": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Nullable_PubRandCommit",
      "anyOf": [
        {
          "$ref": "#/definitions/PubRandCommit"
        },
        {
          "type": "null"
        }
      ],
      "definitions": {
        "PubRandCommit": {
          "description": "`PubRandCommit` is a commitment to a series of public randomness. Currently, the commitment is a root of a Merkle tree that includes a series of public randomness values",
          "type": "object",
          "required": [
            "babylon_epoch",
            "commitment",
            "num_pub_rand",
            "start_height"
          ],
          "properties": {
            "babylon_epoch": {
              "description": "The epoch number of Babylon when the commit was submitted",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "commitment": {
              "description": "Value of the commitment. Currently, it's the root of the Merkle tree constructed by the public randomness",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "num_pub_rand": {
              "description": "The amount of committed public randomness",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "start_height": {
              "description": "The height of the first commitment",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      }
    },
    "is_enabled": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Boolean",
      "type": "boolean"
    },
    "last_pub_rand_commit": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Nullable_PubRandCommit",
      "anyOf": [
        {
          "$ref": "#/definitions/PubRandCommit"
        },
        {
          "type": "null"
        }
      ],
      "definitions": {
        "PubRandCommit": {
          "description": "`PubRandCommit` is a commitment to a series of public randomness. Currently, the commitment is a root of a Merkle tree that includes a series of public randomness values",
          "type": "object",
          "required": [
            "babylon_epoch",
            "commitment",
            "num_pub_rand",
            "start_height"
          ],
          "properties": {
            "babylon_epoch": {
              "description": "The epoch number of Babylon when the commit was submitted",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "commitment": {
              "description": "Value of the commitment. Currently, it's the root of the Merkle tree constructed by the public randomness",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "num_pub_rand": {
              "description": "The amount of committed public randomness",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "start_height": {
              "description": "The height of the first commitment",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      }
    }
  }
}
